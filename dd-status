#!/bin/bash
#
# dd-status - a dd wrapper with progress status
#
#    Copyright (C) 2013 Rodrigo Silva (MestreLion) <linux@rodrigosilva.com>
#
#    This program is free software: you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation, either version 3 of the License, or
#    (at your option) any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with this program. See <http://www.gnu.org/licenses/gpl.html>

# TODO: ETA: pv -s ... -- "$input" | dd ...
# TODO: INPUT and OUTPUT optional, use stdin/stdout

myname=${0##*/}
block=1Mi
size=0
autosudo=1

fatal()   { [[ "$1" ]] && echo "$myname: error: $@" >&2 ; exit 1; }
message() { printf "%s\n" "$1"; }
argerr()  { printf "%s: %s\n" "$myname" "${1:-error}" >&2 ; usage 1; }
invalid() { argerr "invalid option: $1" ; }
missing() { argerr "missing ${2:+$2 }argument${1:+ from $1}." ; }
sizefmt() { [[ "$1" ]] || missing "${3:-SIZE}" "${2:-}";
            echo $(numfmt --from=auto -- "$1" || fatal); }

usage() {
	cat <<-USAGE
	Usage: $myname [options] INPUT OUTPUT
	USAGE
	if [[ "$1" ]] ; then
		cat >&2 <<- USAGE
		Try '$myname --help' for more information.
		USAGE
		exit 1
	fi
	cat <<-USAGE

	dd wrapper with progress status

	Options:
	  -h|--help    - show this page.
	  -f|--force   - force copy even for mounted partitions
	  -S|--no-sudo - do not uso 'sudo' even if OUTPUT is not writable by user

	  -s|--size SIZE       - number of BYTES (*NOT* blocks!) to copy.
	                           0 copies the whole input [Default: $size]
	  -b|--block-size SIZE - copy SIZE blocks at a time. [Default: $block]

	All SIZE units are parsed through 'numfmt' auto mode, so SI suffixes such
	as K, M, G are allowed. '1K' means 1000; use 'Ki' (and 'Mi', 'Gi', etc)
	for 1024-based units.

	Copyright (C) 2012 Rodrigo Silva (MestreLion) <linux@rodrigosilva.com>
	License: GPLv3 or later. See <http://www.gnu.org/licenses/gpl.html>
	USAGE
	exit 0
}

# Option handling
files=()
for arg in "$@"; do [[ "$arg" == "-h" || "$arg" == "--help" ]] && usage ; done
while (($#)); do
	case "$1" in
	-f|--force  ) force=1;;
	-S|--no-sudo) autosudo=0;;
	-b|--block-size) shift; block=$1;;
	-s|--size      ) shift; size=$1 ;;
	--block-size=*) block=${1#*=};;
	--size=*      ) size=${1#*=} ;;
	--) shift; break;;
	-*) invalid "$1";;
	* ) files+=( "$1" );;
	esac
	shift || break
done
files+=( "$@" )
input=${files[0]}
output=${files[1]}

[[ "$input"  ]] || missing "" "INPUT"
[[ "$output" ]] || missing "" "OUTPUT"

sudo=()
if ((autosudo)) && ! [[ -w "$output" ]]; then sudo=(sudo); fi

size=$( sizefmt "$size"  '--size'      ) || exit
block=$(sizefmt "$block" '--block-size') || exit

if ! ((force)); then
	for file in "$input" "$output"; do
		if [[ -b "$file" ]] && grep -q "^$file " /proc/mounts; then
			fatal "$file seems to be a mounted partition." \
				"Un-mount it first or use --force."
		fi
	done
fi

args=(if="$input" of="$output" bs="$block" status=progress oflag=nocache,sync)
if ((size)); then
	args+=(iflag=count_bytes count="$size")
fi

cmd=("${sudo[@]}" dd "${args[@]}")
echo "${cmd[@]}" >&2

"${cmd[@]}"
