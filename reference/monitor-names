#!/bin/bash
#
# Testbed for monitor-switch print_monitors()
#
# Answer to:
# http://stackoverflow.com/questions/10500521/linux-retrieve-monitor-names

# Inspired by:
#xrandr --verbose | perl -ne '
#if ((/EDID_DATA:/.../:/) && !/:/) {
#  s/^\s+//;
#  chomp;
#  $hex .= $_;
#} elsif ($hex) {
#  open FH, "|strings|head -n4|tail -n1";
#  print FH pack("H*", $hex);
#  $hex = "";
#}'

# Old version
#xrandr --verbose | awk '
#/[:.]/ && hex {
#	sub(/.*000000fc00/, "", hex)
#	hex = substr(hex, 0, 26) "0a"
#	sub(/0a.*/, "0a", hex)
#	print hex
#	hex=""
#}
#hex {
#	gsub(/[ \t]+/, "")
#	hex = hex $0
#}
#/EDID.*:/ {
#	hex=" "
#}' | xxd -r -p


print_monitors() {
	if [[ -f "${1:-}" ]]; then
		local input=(cat -- "$1")
	else
		local input=(LC_ALL=C xrandr --prop)
	fi
	while read -r output conn hex; do
		echo "# $output	$conn	$(xxd -r -p <<< "${hex:-2d}")"
	done < <("${input[@]}" | tr -d '\r' | awk '
	h && /[^ \ta-f0-9]/ {
		n = split(hex, names, "000000fc00")
		hex = ""
		for (i = 2; i <= n; i++) {
			name = substr(names[i], 0, 26) "0a"
			sub(/0a.*/, "", name)
			if (name) {
				if (hex) name = "20" (name "")
				hex = hex (name "")
			}
		}
		h = 0
	}
	!/^[ \t]/ {
		if (ok) print output, conn, hex
		output = $1
		conn = output; sub(/-.*$/, "", conn)
		ok = (output && (substr($2, 0, 1) == "c"))  # Connected output
		hex = ""
		h = 0
	}
	h {sub(/[ \t]+/, ""); hex = hex ($0 "")}
	/EDID.*:/ {h=1; ok=(output && 1)}
	/ConnectorType:/ {conn = $2}
	END {if (ok) print output, conn, hex}
	' | sort)
}

print_debug() {
	if [[ -f "${1:-}" ]]; then
		local input=(cat -- "$1")
	else
		local input=(LC_ALL=C xrandr --prop)
	fi
	"${input[@]}" | tr -d '\r' | awk '
	h && /[^ \ta-f0-9]/ {
		print "EDID for output " output " ended in line " NR-1 ". Full EDID data: \n" hex
		n = split(hex, names, "000000fc00")
		print "\tName fragments:", n-1
		hex = ""
		for (i = 2; i <= n; i++) {
			name = substr(names[i], 0, 26) "0a"
			print "\tName fragment " i - 1 ": " name
			sub(/0a.*/, "", name)
			if (name) {
				if (hex) name = "20" (name "")
				hex = hex (name "")
			}
		}
		h=0
	}
	!/^[ \t]/ {
		if (ok) print output, conn, hex
		output = $1
		conn = output; sub(/-.*$/, "", conn)
		ok = (output && (substr($2, 0, 1) == "c"))  # Connected output
		hex = ""
		h = 0
	}
	h {
		sub(/[ \t]+/, "");
		hex = hex ($0 "");
		print "\tEDID data in line " NR ": " $0;
	}
	/EDID.*:/ {
		h=1;
		ok=(output && 1)
		print "\nFound EDID begin block for output " output " in line " NR
	}
	/ConnectorType:/ {conn = $2}
	END {if (ok) print output, conn, hex}
	'
}


print_debug "${1:-}"
echo "-----------------------------------------------------------------------"
print_monitors "${1:-}"
