#!/bin/bash
#
# https://www.guyrutenberg.com/2020/08/23/quickly-generate-lots-of-random-data/
# https://superuser.com/a/793003/68321
#
# AES-128 CTR chosen as AES is Hardware-accelerated on most modern CPUs (~2015)
#
# Check algoritms performance with `openssl speed [-evp] [ALGO...]`
# 18.20GiB/s: pv -B 1M /dev/zero > /dev/null (19.5 with dd)
#  4.15GiB/s: pv -B 1M /dev/zero | cat > /dev/null
#  3.37GiB/s: OpenSSL none
#  2.88GiB/s: OpenSSL aes-128-ctr
#  2.57GiB/s: OpenSSL aes-256-ctr
#  1.12GiB/s: OpenSSL chacha20

size=${1:-10G}
benchmark=${2:-dd}

# ---------------------

benchmark_pv() {
	pv -B 1M -Ss "$size" "${1:-/dev/zero}"
}

benchmark_dd() {
	dd bs=1M iflag=fullblock,count_bytes count="$size" status=progress if="${1:-/dev/zero}"
}

message() {
	printf '\n%s\n' "$@"
}

# ---------------------

openssl_ciphers() {
	openssl enc -ciphers | awk 'NF==3{print($1 "\n"  $2 "\n" $3)}'
}

openssl_fast_ciphers() {
	# AES ECB is faster but not suitable for most needs
	printf '%s\n' aes-{128,192,256}-ctr chacha20
}

opensslenc() {
	openssl enc "$@" -pbkdf2 \
	  -pass pass:"$(dd if=/dev/urandom bs=16 count=1 status=none | base64)" \
	  > /dev/null
}

openssl_none() {
	openssl enc -none > /dev/null
}

openssl_fastest() {
	opensslenc -aes-128-ctr  # ~2,85GiB/s (ecb is ~2,88GiB/s)
}


# ---------------------

benchmark=benchmark_$benchmark

message "Theoretical CPU/RAM limit: /dev/zero with no pipes"
"$benchmark" >/dev/null

message "Reference: /dev/zero | cat"
"$benchmark" | cat >/dev/null

message "OpenSSL none"
"$benchmark" | openssl_none

while IFS= read -r cipher; do
	message "OpenSSL $cipher"
	"$benchmark" | opensslenc -"$cipher" >/dev/null
done < <(openssl_fast_ciphers)  # or openssl_ciphers for all

# Too slow!
#message "/dev/urandom"
#"$benchmark" /dev/urandom
