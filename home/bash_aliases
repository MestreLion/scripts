# This is sourced by $SCRIPTS/home/bashrc after it sources $SCRIPTS/home/bash_completion

source <(snipfile "$SCRIPTS/home/bash_aliases_min" 'Aliases')

# -----------------------------------------------------------------------------

# Non-common aliases and functions
# Experimental, WIP, or deemed too specific to be in bash_aliases_min

alias cd..="cd .."
alias cd...="cd ../.."
alias cd....="cd ../../.."
alias cd.....="cd ../../../.."
alias ..="cd .."
alias ...="cd ../.."
alias ....="cd ../../.."
alias .....="cd ../../../.."
alias package="dpkg-www"  # requires dpkg-www
alias ca="CA.pl"
alias apt-add-ppa="apt-manage"  # from repolib: https://github.com/pop-os/repolib
alias rogue-ssh="roguepc -r ssh rogue &"
#alias have="exists"

args() { local i=0; while (($#)); do echo "$((++i))=$1"; shift; done; }

# "Loads" a (newly added) group into the user's current shell
# Preserves the current effective group (default or not)
# risky: exits the current shell on any errors
# not persistent: only a full logout will do so
load-group() {
	(($#)) || { echo "Usage: load-group GROUP" >&2; return 1; }
	exec sg "$1" newgrp "$(id -gn)"
} && complete -W "$(groups "${USER:-$(id -un)}" | cut -d: -f2-)" load-group

which()   { builtin type -P "$@" ; }
sprunge() { local l=${2-bash}; echo $(curl -sSF "sprunge=<${1:--}" http://sprunge.us)${l:+?$l}${3:+#n-$3}; }

# Take a look at realpath --relative-to=DIR and ln -r|--relative
relpath() { python3 -c "import os,sys;print(os.path.relpath(*sys.argv[1:3]))" "$@"; }

# Set the window title of the terminal emulator
# Also available as 'xtitle' apt package, and in bash_aliases_min (sans documentation)
# Empty arguments are ignored by xterm and reset default title in Gnome Terminal
xtitle() {
	# tput hs && {[[ "$1" ]] && {tput tsl; printf '%s' "$*"; tput fsl; } || tput dsl; }
	# But using tput only works with hs-capable TERM, e.g. xterm+sl{,-twm}
	# xterm can save/restore title with '\e[22;0t' / '\e[23;0t'
	# See man 5 terminfo / https://invisible-island.net/ncurses/terminfo.ti.html
	# https://gist.github.com/KevinGoodsell/744284
	# http://ncurses.scripts.mit.edu/?p=ncurses.git;a=blob;f=misc/terminfo.src;hb=HEAD
	printf '\e]2;%s\a' "$*"
}

# WIP to be the new open()
# idea: supress error messages only *after* (and *if*) successfully opened a file
# all messages before from launcher itself (gio open/xdg-open) should be printed
# after launcher returns, everything else should be discarded or redirected
# If needed, test for success likelihood: file/URI exists, has default handler, etc
newopen() {
	local f=${1:-}
	local out="$HOME"/.nohup.txt
	local usage="Usage: open [-h|--help] FILE\n" arg err

	for arg in "$@"; do
		if [[ "$arg" == '--' ]]; then break; fi
		if [[ "$arg" == "-h" || "$arg" == "--help" ]]; then
			printf "Open FILE (or URI) with its default application\n${usage}"
			return
		fi
	done
	# TODO: proper arg parse to allow --, -v|--verbose, -q|--quiet
	if [[ -z "$f" ]]; then
		printf >&2 "open: missing FILE/URI argument\n${usage}"
		return 1
	fi

	# now dance around with gio mime, gio info, gio open, xdg-mime, xdg-open
	if ! { xdg-open "$f" &>>"$out" || { err=$?; false; }; }; then
		exec >&2
		#echo "error opening '$f', see $out"
		tail -n1 "$out"
		return $err
	fi
}

# Profiling:
# python3 -m cProfile -o profile.profile ./myprog.py ...
#
# pip3 install --user gprof2dot
# gprof2dot -f pstats profile.profile -o profile.dot
# xdg-open profile.dot  # requires GraphViz
#
# pip3 install --user snakeviz
# snakeviz myprog.profile  # outputs lots of errors, but URL provided works

pyprofile() {
	(($#)) || { echo "Usage: pyprofile3 <COMMAND> [ARGS...]" >&2; return 1; }
	# Use PYTHON or the system python3 (`-m` is available since Python 3.7)
	local python=${PYTHON:-python3}
	"$python" -m cProfile --sort=time "$@" |
	{ awk -v l=$((LINES-10)) '/ncalls  tottime/{t=l}t==1{exit}t>0{t--}{print}'
	cat - >/dev/null; }
}

pyprofile-view() {
	(($#)) || { echo "Usage: pyprofile3-view <COMMAND> [ARGS...]" >&2; return 1; }
	local python=${PYTHON:-python3}
	local dotfile=pyprofile.$(timestamp).dot
	"$python" -m cProfile -o pyprofile.pstats "$@" &&
	gprof2dot -f pstats pyprofile.pstats -o "$dotfile" &&
	xdg-open "$dotfile"
}

venv() {
	local vdir=${1:-venv}
	local python=$(compgen -c python | grep -P '^python\d[.\d]*$' | sort -ruV | head -n1)
	local usage="Creates a Python Virtual Environment, activate and upgrade it"
	usage+="\nUsage: venv ENV_DIR"
	if [[ "$vdir" =~ ^(|-h|--help)$ ]]; then echo -e "$usage" >&2; return 1; fi
	"$python" -m venv "$vdir" || {
		echo "Must install dependencies: sudo apt install python3-{pip,venv}" >&2
		return 1
	}
	source "$vdir"/bin/activate &&
	PYTHONWARNINGS="ignore::DeprecationWarning" pip install --upgrade pip setuptools wheel
}
# TAB-friendly
venv-activate() {
	source "${1:-venv}"/bin/activate
}

# useful for python, pip
commands-with-prefix() { local prefix=$1; compgen -c "$prefix" | sort -uV; }
command-latest() {
	local prefix=$1
	compgen -c "$prefix" |
	grep -P "^${prefix}\d[.\d]*\$" |
	sort -ruV |
	head -n1
}
pip-list-manual() {
	local pip; pip=${1:-$(command-latest pip)}
	if ! exists "$pip"; then echo "$pip is not installed" >&2; return 1; fi
	"$pip" list --user --not-required --exclude pip |
	awk '{print $1}' | tail -n+3
}
pip-autoremove() {
	local pip; pip=${1:-$(command-latest pip)}
	local packages
	if ! exists "$pip"; then echo "$pip is not installed" >&2; return 1; fi
	packages=$(pip-list-manual "$pip")
	while [[ "$packages" ]]; do
		"$pip" uninstall -yr <<< "$packages"
		packages=$(pip-list-manual "$pip")
	done
}


sri-hash() {
	if [[ -z "$1" ]]; then echo "Usage: sri-hash URL" >&2; return; fi
	echo -n "<script src=\"$1\" integrity=\"sha256-"
	curl -s4 "$1" |
	openssl dgst -sha256 -binary |
	openssl base64 -A
	echo '" crossorigin="anonymous"></script>'
}

# unzip featuring an enhanced version of tar's --strip-components=1
# Usage: unzip-strip ARCHIVE [DESTDIR] [EXTRA_cp_OPTIONS]
# Derive DESTDIR to current dir and archive filename or toplevel dir
# https://superuser.com/a/573624/68321
unzip-strip() (
	set -eu
	local archive=$1
	local destdir=${2:-}
	shift; shift || :
	local tmpdir=$(mktemp -d)
	trap 'rm -rf -- "$tmpdir"' EXIT
	unzip -qd "$tmpdir" -- "$archive"
	shopt -s dotglob
	local files=("$tmpdir"/*) name i=1
	if (( ${#files[@]} == 1 )) && [[ -d "${files[0]}" ]]; then
		name=$(basename "${files[0]}")
		files=("$tmpdir"/*/*)
	else
		name=$(basename "$archive"); name=${archive%.*}
		files=("$tmpdir"/*)
	fi
	if [[ -z "$destdir" ]]; then
		destdir=./"$name"
	fi
	while [[ -f "$destdir" ]]; do destdir=${destdir}-$((i++)); done
	mkdir -p "$destdir"
	cp -ar "$@" -t "$destdir" -- "${files[@]}"
)

# Even more 1337!
rename-function matrix matrix-fake
matrix() {
	if ! exists cmatrix; then
		echo "Runing fake matrix, install 'cmatrix' for the real one" >&2
		matrix-fake
		return
	fi
	# cmatrix -a, asynchronous scroll looks bad in linux TTY and terrible in X11
	# See https://github.com/abishekvashok/cmatrix/issues/124
	if [[ "$TERM" == "linux" ]]; then
		local default=$(mktemp) && trap 'rm -f -- "$default"' RETURN
		setfont -O "$default" matrix.psf
		cmatrix -sbxu8  # -x seems to be -l minus setfont, indicates custom font
		setfont "$default"
	else
		# cmatrix-xfont installs in /usr/share/fonts/X11/misc/mtx.pcf.gz
		# To enable X11 font, see https://unix.stackexchange.com/a/88734/4919
		cmatrix -sbu8
	fi
}

mv-link() (  # any particular reason for this to be a subshell??? relpath() won't work!
	local newdir=$1
	local msg1="Move all symlinks from current dir to another path, and make them relative"
	local msg2="Usage: mv-link DESTDIR"
	[[ "$newdir" ]] || { printf '%s\n%s\n' "$msg1" "$msg2"; return 1; }
	while read -r link; do
		ln -s "$(relpath "$(readlink -n "$link")" "$newdir")" \
			"$newdir/$(basename "$link")" &&
		rm "$link"
	done < <(find "." -maxdepth 1 -type l)
)

compare-images() (
	local tmpdir=$(mktemp -d) || exit 1
	trap 'rm -rf -- "$tmpdir"' EXIT
	for img in "$@"; do
		convert "$img" pam:"$tmpdir"/"$(basename "$img")"
	done
	md5sum "$tmpdir"/* | sort
)

# Minecraft
_minecraft_saverestore() {
	local src=$HOME/.minecraft/saves
	local dst=$HOME/install/minecraft/backup/minecraft-auto/saves
	local mode=${1:-save}
	if [[ "$mode" == "restore" ]]; then
		local tmp=$src
		src=$dst
		dst=$tmp
	fi
	src=${src%/}
	dst=${dst%/}
	[[ -d "$src" ]] || { echo "$src does not exist" >&2; return 1; }
	rm -rf   -- "$dst".bak             &&  # Delete destination backup, if exists
	mkdir -p -- "$dst"{,.bak}          &&  # Create destination and its backup
	cp -pr -t   "$dst".bak -- "$dst"/* &&  # Backup destination content
	rm -rf   -- "$dst"/*               &&  # Delete destination content
	cp -pr -t   "$dst"     -- "$src"/*     # Copy Source content to Destination
}
minecraft-save()    { _minecraft_saverestore save;    }
minecraft-restore() { _minecraft_saverestore restore; }

# -----------------------------------------------------------------------------

complete -c where super-sudo cmd{list,cat,open}  # commands (executables in $PATH)
complete -A function sudo-function
complete -F _comp_pkg_names ubuntu-package why apt-tree  # packages in repositories
complete-copy ls ll la
complete-copy dwww-man mand manc package
