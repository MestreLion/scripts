# Commands meant to run at every shell
#
# To be sourced by ~/.bashrc
#
# To run, add these lines to ~/.bashrc:
#
#	if [ -f "$SCRIPTS/home/bashrc" ] ; then
#	    . "$SCRIPTS/home/bashrc"
#	fi

# Supporting Functions (for scripts, not terminal, those go to bash_aliases) ---

relpath() { python3 -c "import os,sys;print(os.path.relpath(*sys.argv[1:3]))" "$@"; }
exists()  { type "$@" &>/dev/null; }

# ------------------------------------------------------------------------------

# Enable bash-completion, if not already enabled by ~/.bashrc
if	[ -z "${BASH_COMPLETION_VERSINFO:-}" ] &&
	[ -f /usr/share/bash-completion/bash_completion ] &&
	! shopt -oq posix
then
	source /usr/share/bash-completion/bash_completion
fi

if [ -f "$SCRIPTS/home/bash_aliases" ] ; then
	source "$SCRIPTS/home/bash_aliases"
fi

if [ -f "$HOME/work/wine-tools/wine-tools-bashrc" ] ; then
	source "$HOME/work/wine-tools/wine-tools-bashrc"
fi

if [ -f "$HOME/work/dosbox/dosbox-tools/dosbox-bashrc" ] ; then
	source "$HOME/work/dosbox/dosbox-tools/dosbox-bashrc"
fi

# PS1 customization ------------------------------------------------------------
# http://bashrcgenerator.com/

# Exit code of last command
# Blank if 0, otherwise use $1 as formatting string, '%s ' by default
# Return the same code, to preserve it between prompts
# Alternative: \${?/#0/} directly into PS1, but lacks surrounding spaces
ps1_exitcode() {
	local s=$?
	(($s)) && printf "${1:-%s }" "$s"
	return $s
}

# Git Status
# See /usr/lib/git-core/git-sh-prompt
export GIT_PS1_SHOWDIRTYSTATE=1
export GIT_PS1_SHOWSTASHSTATE=1
export GIT_PS1_SHOWUNTRACKEDFILES=1
if ! exists __git_ps1; then
	# __git_ps1() is transitioning away from git bash completion
	# See /etc/bash_completion.d/git-prompt
	if [[ -r /usr/lib/git-core/git-sh-prompt ]]; then
		source /usr/lib/git-core/git-sh-prompt
	else
		# Simpler version
		__git_ps1() {
			local s=$?
			if exists git; then
				git branch 2>/dev/null |
				grep '^*' |
				sed 's/* \(.*\)/\1 /'
			fi
			return "$s"
		}
	fi
fi

# Colors
# '\[' and '\]' are for PS1, not colors: https://mywiki.wooledge.org/BashFAQ/053
color() { printf '\['; tput setaf "${1:-15}"; printf '\]'; }
declare -A c=(
	 [BLACK]=$(color 0)  # "\[\e[30m\]"
	   [RED]=$(color 1)  # "\[\e[31m\]"
	 [GREEN]=$(color 2)  # "\[\e[32m\]"
	[YELLOW]=$(color 3)  # "\[\e[33m\]"
	  [BLUE]=$(color 4)  # "\[\e[34m\]"
	[PURPLE]=$(color 5)  # "\[\e[35m\]"
	  [CYAN]=$(color 6)  # "\[\e[36m\]"
	 [WHITE]=$(color 7)  # "\[\e[37m\]"
	  [BOLD]="\[$(tput bold)\]"  # "\[\e[1m\]"
	 [RESET]="\[$(tput sgr0)\]"  # "\[\e[0m\]"
)

# Final product
PS1=${c[RESET]}${c[BOLD]}\
"${c[PURPLE]}\t ${c[GREEN]}\u@\h ${c[BLUE]}\w "\
"${c[RED]}\$(__git_ps1 '%s ')${c[YELLOW]}\$(ps1_exitcode)${c[BLUE]}\\$ "\
${c[RESET]}

unset color C


# Settings ---------------------------------------------------------------------

# Disable the dreaded history expansion for interactive sessions
# A.K.A 'why echo "Hello World!" do not work?'
set +o histexpand # same as set +H

# Create core dump files on segmentation fault. File `core` at current process dir
#ulimit -c unlimited

# ------------------------------------------------------------------------------

# So cute!
exists cowfortune && { cowfortune | { exists lolcat && lolcat || cat ; } } || :
