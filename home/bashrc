# Commands meant to run at every shell
#
# To be sourced by ~/.bashrc
#
# To run, add these lines to ~/.bashrc:
#
#	if [ -f "$SCRIPTS/home/bashrc" ] ; then
#	    . "$SCRIPTS/home/bashrc"
#	fi

# Advertise 256-color capability when using gnome-terminal.
# Will only work until gnome-terminal v3.13, as it has removed the
# setting of COLORTERM variable
term=terminfo/x/xterm-256color
if [[ "$COLORTERM" == gnome-terminal ]] &&
   [[ "$TERM" == xterm ]] &&
   [[ -r /lib/"$term"       ||  # ncurses-base package
      -r /usr/share/"$term" ||  # ncurses-term, does not contain xterm-256color
      -r /etc/"$term"       ||  # empty by default
      -r "$HOME"/."$term"   ]]  # dir may not exist
then
	export TERM=gnome-256color
fi
unset term

# enable programmable completion features (you don't need to enable
# this, if it's already enabled in /etc/bash.bashrc and /etc/profile
# sources /etc/bash.bashrc).
if [ -f /etc/bash_completion ] && ! shopt -oq posix; then
    . /etc/bash_completion
fi

if [ -f "$SCRIPTS/home/bash_aliases" ] ; then
	source "$SCRIPTS/home/bash_aliases"
fi

if [ -f "$HOME/work/wine-tools/wine-tools-bashrc" ] ; then
	PATH="$PATH:$HOME/work/wine-tools"
	source "$HOME/work/wine-tools/wine-tools-bashrc"
fi

if [ -f "$HOME/work/dosbox/dosbox-tools/dosbox-bashrc" ] ; then
	source "$HOME/work/dosbox/dosbox-tools/dosbox-bashrc"
fi

declare -A termcolor
termcolor[RED]="\[\033[1;31m\]"    # $(tput bold; tput setaf 1)
termcolor[GREEN]="\[\033[1;32m\]"  # $(tput bold; tput setaf 2)
termcolor[BLUE]="\[\033[1;34m\]"   # $(tput bold; tput setaf 4)
termcolor[WHITE]="\[\033[1;37m\]"  # $(tput bold; tput setaf 7)
termcolor[RESET]="\[\033[00m\]"    # $(tput sgr0)

PS1="${termcolor[RESET]}${termcolor[GREEN]}\u@\h ${termcolor[BLUE]}\w "\
"${termcolor[RED]}\$(git branch 2>/dev/null | grep '^*' | cut -c 3- | sed 's/.*/& /')"\
"${termcolor[BLUE]}\$${termcolor[RESET]} "

# Disable the dreaded history expansion for interactive sessions
# A.K.A 'why echo "Hello World!" do not work?'
set +o histexpand # same as set +H

# Create core dump files on segmentation fault. File `core` at current process dir
ulimit -c unlimited

relpath() { python -c "import os,sys;print os.path.relpath(*sys.argv[1:3])" "$@"; }
mv-link() (
	local newdir=$1
	local msg1="Move all symlinks from current dir to another path, and make them relative"
	local msg2="Usage: mv-link DESTDIR"
	[[ "$newdir" ]] || { printf '%s\n%s\n' "$msg1" "$msg2"; return 1; }
	while read -r link; do
		ln -s "$(relpath "$(readlink -n "$link")" "$newdir")" \
			"$newdir/$(basename "$link")" &&
		rm "$link"
	done < <(find "." -maxdepth 1 -type l)
)

#minecraft
minecraft-restore() {
	rm -rf ~/cloud/Dropbox/minecraft/saves.bak &&
	mv     ~/cloud/Dropbox/minecraft/saves{,.bak} &&
	cp -r  ~/install/minecraft/saves/minecraft-auto/saves ~/cloud/Dropbox/minecraft
}
minecraft-save() {
	rm -rf   ~/install/minecraft/saves/minecraft-auto/saves.bak &&
	mkdir -p ~/install/minecraft/saves/minecraft-auto/saves
	mv       ~/install/minecraft/saves/minecraft-auto/saves{,.bak} &&
	cp -r    ~/cloud/Dropbox/minecraft/saves ~/install/minecraft/saves/minecraft-auto
}

# So cute!
type cowfortune >/dev/null 2>&1 && cowfortune
