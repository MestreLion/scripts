# Commands meant to run at every shell
#
# To be sourced by ~/.bashrc
#
# To run, add these lines to ~/.bashrc:
#
#	if [ -f "$SCRIPTS/home/bashrc" ] ; then
#	    . "$SCRIPTS/home/bashrc"
#	fi

# Supporting Functions (for scripts, not terminal, those go to bash_aliases) ---

relpath() { python3 -c "import os,sys;print(os.path.relpath(*sys.argv[1:3]))" "$@"; }
exists()  { type "$@" &>/dev/null; }

# ------------------------------------------------------------------------------

# Enable bash-completion, if not already enabled by ~/.bashrc
if	[ -z "${BASH_COMPLETION_VERSINFO:-}" ] &&
	[ -f /usr/share/bash-completion/bash_completion ] &&
	! shopt -oq posix
then
	source /usr/share/bash-completion/bash_completion
fi

if [ -f "$SCRIPTS/home/bash_aliases" ] ; then
	source "$SCRIPTS/home/bash_aliases"
fi

if [ -f "$HOME/work/wine-tools/wine-tools-bashrc" ] ; then
	source "$HOME/work/wine-tools/wine-tools-bashrc"
fi

if [ -f "$HOME/work/dosbox/dosbox-tools/dosbox-bashrc" ] ; then
	source "$HOME/work/dosbox/dosbox-tools/dosbox-bashrc"
fi

# PS1 customization ------------------------------------------------------------
# http://bashrcgenerator.com/

declare -A C=(
   [RED]="\[\e[1;31m\]"  # "\[$(tput bold; tput setaf 1)\]"
 [GREEN]="\[\e[1;32m\]"  # "\[$(tput bold; tput setaf 2)\]"
  [BLUE]="\[\e[1;34m\]"  # "\[$(tput bold; tput setaf 4)\]"
[YELLOW]="\[\e[1;33m\]"  # "\[$(tput bold; tput setaf 3)\]"
[PURPLE]="\[\e[1;35m\]"  # "\[$(tput bold; tput setaf 5)\]"
 [WHITE]="\[\e[1;37m\]"  # "\[$(tput bold; tput setaf 7)\]"
 [RESET]="\[\e[0m\]"     # "\[$(tput sgr0)\]"
)

# Alternative: \${?/#0/} directly into PS1, but lacks surrounding spaces
__status() {
	local s=$?
	(($s)) && printf '%s ' "$s"
	return $s
}

# See /usr/lib/git-core/git-sh-prompt
export GIT_PS1_SHOWDIRTYSTATE=1
export GIT_PS1_SHOWSTASHSTATE=1
export GIT_PS1_SHOWUNTRACKEDFILES=1

# __git_ps1() is transitioning away from git bash completion
# See /etc/bash_completion.d/git-prompt
if ! exists __git_ps1; then
	if [[ -r /usr/lib/git-core/git-sh-prompt ]]; then
		source /usr/lib/git-core/git-sh-prompt
	else
		# Simpler version
		__git_ps1() {
			local s=$?
			git branch 2>/dev/null | grep '^*' | sed 's/* \(.*\)/\1 /'
			return "$s"
		}
	fi
fi

PS1="${C[RESET]}${C[PURPLE]}\t ${C[GREEN]}\u@\h ${C[BLUE]}\w "\
"${C[RED]}\$(__git_ps1 '%s ')${C[YELLOW]}\$(__status)${C[BLUE]}\$ ${C[RESET]}"

unset C

# Settings ---------------------------------------------------------------------

# Disable the dreaded history expansion for interactive sessions
# A.K.A 'why echo "Hello World!" do not work?'
set +o histexpand # same as set +H

# Create core dump files on segmentation fault. File `core` at current process dir
#ulimit -c unlimited

# ------------------------------------------------------------------------------

# So cute!
exists cowfortune && { cowfortune | { exists lolcat && lolcat || cat ; } } || :
