# Bash completion static file
# Sourced by /usr/share/bash-completion/bash_completion in ~/.bashrc
# via BASH_COMPLETION_USER_FILE set in ./profile

# This file is for static, eager completions loading, the user equivalent of the
# system-wide /etc/bash_completion. An additional location for static completions
# is BASH_COMPLETION_COMPAT_DIR, by default /etc/bash_completion.d, loaded before
# BASH_COMPLETION_USER_FILE, with no user counterpart. That's why this file also
# sources ./bash_completion.d/*

# A better alternative for eager loading is lazy loading, also called dynamic
# or on-demand, where the completion for a given command is only loaded when the
# user types <cmd> and hits <TAB> for the first time. It requires a diectory with
# one file per command to be completed

# Lazy-loading directories are:
# - /usr/share/bash-completion/completions for system-wide completions
# - BASH_COMPLETION_USER_DIR, by default XDG_DATA_HOME/bash-completion/completions,
#   which by default evaluates to ~/.local/share/bash-completion/completions,
#   for user-defined completions

#create_systemctl_aliases() {
#	local target=/usr/share/bash-completion/completions/systemctl
#	local comps=${xdg_data}/bash-completion/completions
#	xdg_create "$target" "$comps"
#	if ! [[ -r "$comps"/status echo > ln -s -- "$target" "$comps"/status
#	ln -s -- status "$comps"/"$cmd"
#	local cmd; }
#create_systemctl_aliases; unset create_systemctl_aliases



# copies a completion definition for a command to other command(s)
complete-copy() {
	local cmd="$1"
	shift
	if complete -p "$cmd" &>/dev/null &&
	   type "$@"          &>/dev/null
	then
		eval $(complete -p "$cmd") "$@"
	fi
}

# package names
# See /usr/share/bash-completion/completions/apt-cache._apt_cache_packages()
_comp_pkg_names() {
	local cur; _get_comp_words_by_ref cur
	COMPREPLY=( $(apt-cache --no-generate pkgnames -- "$cur" 2>/dev/null) )
	return 0
}

# Files from a given dir.
# NOT to be directly assigned to a command, but to be used by other completions,
# hence the double underscore. E.g.: _comp_xxx() { __comp_dir_files "/etc/xxx"; }
__comp_dir_files() {
	local dirpath=${1:-.}
	local cur prev words cword
	_init_completion || return
	COMPREPLY=( $(compgen -W '$(ls "${dirpath}"/*)' -- ${cur}) )
}
# ... or use `complete -G '/etc/xxx/*' xxx` and drop both _comp_xxx() and this

# This is intencionally distinct from BASH_COMPLETION_USER_DIR, as a per-user
# counterpart for static, *eager* loading
# FIXME: Any particular reason for *wanting* a static, eager loading dir?
for script in "$(dirname "${BASH_SOURCE[0]}")"/bash_completion.d/*; do
	if [[ ${script##*/} != @(*~|*.bak|README*) &&
	      -f "$script" && -r "$script" ]]
	then
		source "$script"
	fi
done
unset script
