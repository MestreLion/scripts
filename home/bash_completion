# To be sourced by ~/.bash_completion

# BASH_COMPLETION_USER_DIR, by default ~/.local/share/bash-completion/completions,
# is searched for completions *on-demand*, ie, when user types <cmd> and hit <TAB>,
# also called "dynamic" or "lazy" loading.
# For static (eager) loading, use either BASH_COMPLETION_COMPAT_DIR, by default
# /etc/bash_completion.d (no user counterpart), or BASH_COMPLETION_USER_FILE,
# by default ~/.bash_completion, which sources this file.
# BASH_COMPLETION_COMPAT_DIR is loaded before BASH_COMPLETION_USER_FILE
# All of this is done at /usr/share/bash-completion/bash-completion, sourced
# by ~/.bashrc or $SCRIPTS/home/bashrc (whichever sources it first)

# copies a completion definition for a command to other command(s)
complete-copy() {
	local cmd="$1"
	shift
	if complete -p "$cmd" &>/dev/null &&
	   type "$@"          &>/dev/null
	then
		eval $(complete -p "$cmd") "$@"
	fi
}

# package names
# functionally identical to /etc/bash_completion.d/devscripts.pkgnames
_comp_pkg_names() {
	local cur; _get_comp_words_by_ref cur
	COMPREPLY=( $(apt-cache --no-generate pkgnames -- $cur 2>/dev/null) )
	return 0
}

# Files from a given dir.
# NOT to be directly assigned to a command, but to be used by other completions,
# hence the double underscore. E.g.: _comp_xxx() { __comp_dir_files "/etc/xxx"; }
__comp_dir_files() {
	local dirpath=${1:-.}
	local cur prev words cword
	_init_completion || return
	COMPREPLY=( $(compgen -W '$(ls "${dirpath}"/*)' -- ${cur}) )
}
# ... or use `complete -G '/etc/xxx/*' xxx` and drop both _comp_xxx() and this

# This is intencionally distinct from BASH_COMPLETION_USER_DIR, as a per-user
# counterpart for static, *eager* loading
# FIXME: Any particular reason for *wanting* a static, eager loading dir?
BASH_COMPLETION_DIR_USER="$SCRIPTS/home/bash_completion.d"

if [[ -d $BASH_COMPLETION_DIR_USER &&
      -r $BASH_COMPLETION_DIR_USER &&
      -x $BASH_COMPLETION_DIR_USER ]]; then
	for script in "$BASH_COMPLETION_DIR_USER"/*; do
		if [[ ${script##*/} != @(*~|*.bak|README*) &&
		      -f $script &&
		      -r $script ]]; then
			source "$script"
		fi
	done
	unset script
fi
