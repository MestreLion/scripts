#!/bin/bash
#
# pencheck - create, copy and check random files to test storage integrity
#
# Copyright (C) 2020 Rodrigo Silva (MestreLion) <linux@rodrigosilva.com>
# License: GPLv3 or later, at your choice. See <http://www.gnu.org/licenses/gpl>
#------------------------------------------------------------------------------

set -Eeuo pipefail  # exit on any error
trap '>&2 echo "non-success status: line $LINENO, status $?: $BASH_COMMAND"' ERR

#------------------------------------------------------------------------------

count=10
size=100M
bs=1Mi
verbose=1

#------------------------------------------------------------------------------

myname=${0##*/}
mydir=$(dirname "$(readlink -f "$0")")

dirbase=$myname
checksum=sha256sum  # must have --binary, --check and --ignore-missing
verify=${myname}-verify
checkfile=${myname}-sha256sum.txt

#------------------------------------------------------------------------------

bold()    { tput bold; printf '%s' "$@"; tput sgr0; }
red()     { tput setaf 1; bold "$@"; }
green()   { tput setaf 2; bold "$@"; }
fatal()   { if (($#)); then { red "$@"; echo; } >&2; fi; exit 1; }
message() { if (($# && verbose)); then green '* ' "$@"; echo; fi; }
argerr()  { printf "%s: %s\n" "$myname" "${1:-error}" >&2; usage 1; }
invalid() { argerr "invalid ${2:-option}: ${1:-}"; }
missing() { argerr "missing ${1:+$1 }argument${2:+ in $2}."; }
integer() { [[ "$1" ]] || missing "${3:-NUM}" "${2:-}"; [[ "$1" != *[!0-9]* ]] ||
            argerr "${2:+${3:-NUM} argument in $2 is }not an integer: $1"; }
sizefmt() { [[ "$1" ]] || missing "${3:-SIZE}" "${2:-}";
            local num=$(numfmt --from=auto -- "$1");
            [[ "$num" ]] && echo "$num" || return 1; }
exists()  { type "$@" >/dev/null 2>&1; }
si_iec()  { numfmt --to=${2:-si} --suffix 'B' "$1"; }
si()      { si_iec "$1" si; }
iec()     { si_iec "$1" iec-i; }
bytesfmt(){ numfmt --grouping "$@"; }
sizemsg() { echo "$(${2:-si} $1) ${3:+$3 }($(bytesfmt $1) bytes)"; }

garbage() {
	if exists pv; then
		pv "${pvopts[@]}" --buffer-size "$bs" --stop-at-size --size "$size"
	else
		dd "${ddopts[@]}" bs="$bs" iflag=count_bytes,fullblock count="$size"
	fi < /dev/zero |
	openssl enc -aes-128-ctr -pbkdf2 -nosalt -pass \
		"pass:$(dd if=/dev/urandom bs=128 count=1 2>/dev/null | base64)"
}
freespace() {
	local path=$1
	local required=$2
	local available=$(df --block-size=1 -- "$path" | awk 'NR==2{print $4}')
	if ((available < required)); then
		fatal "not enough space on $path: " \
			$(si "$available") " available, " \
			$(si "$required")  " required."
	fi
}

#------------------------------------------------------------------------------

usage() {
	if [[ "${1:-}" ]] ; then exec >&2; fi
	cat <<-USAGE
	Usage: $myname [options] MOUNTDIR
	USAGE
	if [[ "${1:-}" ]] ; then
		cat <<- USAGE
		Try '$myname --help' for more information.
		USAGE
		exit 1
	fi
	cat <<-USAGE

	Create, copy and check random files to test storage integrity

	Options:
	  -h|--help    - show this page.
	  -v|--verbose - print more details about what is being done.

	  -c|--count NUM       - Number of test files. [Default: $count]
	  -s|--size SIZE       - Size of each test file. [Default: $size]
	  -d|--dirbasename DIR - Directory basename under MOUNTDIR root to copy
	                           the test files. [Default: $dirbase]
	  -b|--block-size SIZE - Use SIZE as block size on write operations
	                           when applicable. [Default: $bs]

	Create files with random data in MOUNTDIR/$dirbase, MOUNTDIR usually
	being the mountpoint directory of a USB Thumb Drive, and verify their
	integrity using the '$checksum' utility. Also creates the checksum file
	'$checkfile' and a companion script '$verify' so
	integrity can easily be tested again in the future.

	It is suggested to adjust size and count so test files occupy almost
	all of the storage free space, so for an empty 16GB Thumb Drive $myname
	should preferably be used with '--size 1G --count 15'. Test files can
	later be selectively deleted to free just enough space for your own data,
	keeping the Thumb Drive always almost full to maximize integrity test
	coverage.

	All SIZE units are parsed through 'numfmt' auto mode, so SI suffixes such
	as K, M, G are allowed. '1K' means 1000; use 'Ki' (and 'Mi', 'Gi', etc)
	for 1024-based units.

	Copyright (C) 2020 Rodrigo Silva (MestreLion) <linux@rodrigosilva.com>
	License: GPLv3 or later. See <http://www.gnu.org/licenses/gpl.html>
	USAGE
	exit 0
}

files=()
for arg in "$@"; do [[ "$arg" == "-h" || "$arg" == "--help" ]] && usage ; done
while (($#)); do
	case "$1" in
	-q|--quiet      ) verbose=0;;
	-s|--size       ) shift; size=${1:-}   ;;
	-c|--count      ) shift; count=${1:-}  ;;
	-b|--block-size ) shift; bs=${1:-}     ;;
	-d|--dirbasename) shift; dirbase=${1:-};;
	--size=*        ) size=${1#*=}   ;;
	--count=*       ) count=${1#*=}  ;;
	--block-size=*  ) bs=${1#*=}     ;;
	--dirbasename=* ) dirbase=${1#*=};;
	--) shift; break;;
	-*) invalid "$1";;
	* ) files+=( "$1" );;
	esac
	shift || break
done
files+=("$@")

#------------------------------------------------------------------------------

if ((${#files[@]} < 1)); then missing "MOUNTDIR"; fi
if ((${#files[@]} > 1)); then invalid "${files[1]}" argument; fi

mountdir=${files[0]%/}
[[ -d "$mountdir" ]] || argerr "MOUNTDIR is not a valid directory: $mountdir"

dirbase=${dirbase%/}  # will also consider '/' as missing, which is sensible
[[ "$dirbase" ]] || missing 'DIR' '--dirbase'

# integer automatically checks for missing
integer "$count" '--count'

# sizefmt converts to bytes, and also checks missing values and valid integers
# Being in a subshell requires outer || exit
size=$(sizefmt "$size" '--size') || exit
bs=$(  sizefmt "$bs"   '--block-size') || exit

# account for sha256sum.txt and verify script
totalsize=$((count * (size + 82) + 1000))
message "Use $(sizemsg $bs iec 'block size')"
freespace "$mountdir" "$totalsize"

if ((verbose)); then
	checksumopts=()
	rsyncopts=(--info=progress2)
	ddopts=(status=progress)
	pvopts=()
else
	checksumopts=(--quiet)
	rsyncopts=()
	ddopts=(status=none)
	pvopts=(--quiet)
fi

#------------------------------------------------------------------------------

message "Create $count test files of $(sizemsg $size) each"

tmpdir=$(mktemp --directory) || fatal "could not create temp dir"
trap 'rm -rf -- "$tmpdir"' EXIT
freespace "$tmpdir" "$totalsize"

workdir=$tmpdir/$dirbase
mkdir --parents -- "$workdir"
cd -- "$workdir"
for i in $(seq --equal-width "$count"); do
	garbage "$size" > ./"$myname"-"$i".bin
done
"$checksum" --binary *.bin > ./"$checkfile"
cat > ./"$verify" <<-EOF
	#!/bin/sh
	cd -- "\$(dirname "\$(readlink -f "\$0")")"
	$checksum --check --ignore-missing "\$@" -- ./$checkfile
EOF
chmod +x -- ./"$verify"

message "Verify test files"
sync -- ./*
./"$verify" "${checksumopts[@]}"
cd - &>/dev/null

message "Transfer test data to: $mountdir/$dirbase"
# test again, just in case $mountdir is the same filesystem as $tmpdir
freespace "$mountdir" "$totalsize"
# If only Debian's rsync had --drop-cache :-(
rsync "${rsyncopts[@]}" --recursive -- "$workdir" "$mountdir"

message "Wait for files to be actually written on device"
sync --file-system -- "$mountdir"/"$dirbase"/*  # intentionally sync whole fs

message "Test storage"
# Some filesystems may be automounted as noexec (e.g. FAT), hence invoking sh
sh "$mountdir"/"$dirbase"/"$verify" "${checksumopts[@]}"
