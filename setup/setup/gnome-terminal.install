#!/usr/bin/env bash
# Copyright (C) 2021 Rodrigo Silva (MestreLion) <linux@rodrigosilva.com>
# License: GPLv3 or later. See <http://www.gnu.org/licenses/gpl.html>
#
# Create a new profile named after USER, titled
# Enable 256 colors (not needed anymore)
# Enable transparency
# Increase rows and columns
# Unlimited scroll
#
# Up to Ubuntu 12.04 (v3.4.11): gconf
# v3.8 onwards: dconf/gsettings
#
# for gsettings: https://wiki.gnome.org/Apps/Terminal/FAQ
#
# -----------------------------------------------------------------------------

DESCRIPTION='Gnome Terminal profile and preferences'
ARGS='[COLS] [ROWS]'

setuplib=${SETUP_LIB_PATH:-"$(dirname "$(readlink -f "$0")")"/../setuplib}
if [[ -r "$setuplib" ]]; then source "$setuplib"; else
	echo "Setup library not found: $setuplib" >&2; exit 1;
fi

include dconf

# -----------------------------------------------------------------------------

cols=${1:-${SETUP_GNOME_TERMINAL_COLS:-180}}; integer "$cols" "COLS"
rows=${2:-${SETUP_GNOME_TERMINAL_ROWS:-60}};  integer "$rows" "ROWS"

# -----------------------------------------------------------------------------

user=${USER,,}
user=${user^}

version=$(gnome-terminal --version | awk '{print $4}')

gconftool=gconftool
gcrootkey=/apps/gnome-terminal
gclistkey=$gcrootkey/global/profile_list
gcprofrootkey=$gcrootkey/profiles

gt_gconf_profile_exist() {
	if ! "$gconftool" --dir-exists "$gcprofrootkey"/"$1"; then
		return 1
	fi
}

gt_gconf_profile_must_exist() {
	gt_gconf_profile_exist "$1" || fatal "Missing key for profile: $1"
}

gt_gconf_profile_name() {
	"$gconftool" --get "$gcprofrootkey"/"$1"/visible_name
}

gt_gconf_get_free_profile() {
	local profiles=$("$gconftool" --get-list-size "$gclistkey")

	# Loop existing profiles to:
	# - Check if new profile already exists
	# - Get a suitable key name for the new profile
	local i=-1
	local newprof=""
	local profile
	local profname
	while ((++i < profiles)); do
		profile=$("$gconftool" --get-list-element "$gclistkey" "$i")
		profname=$(gt_gconf_profile_name "$profile")

		if [[ "$profname" == "$user" ]]; then
			# should exit gracefully, so repeated installs are no-op
			# echo "Profile named '$user' already exists: $profile" >&2
			return
		fi

		gt_gconf_profile_must_exist "$profile"

		if [[ -z "$newprof" ]]; then
			local testprof=Profile$i
			if ! gt_gconf_profile_exist "$testprof"; then
				newprof=$testprof
			fi
		fi
	done

	# Some sanity cheks:
	# - Profiles key count must match profiles list size
	# - The 'Default' profile key must exist
	local profkeys
	profkeys=$("$gconftool" --all-dirs "$gcprofrootkey" | wc -l)
	if ! [[ "$profkeys" == "$profiles" ]]; then
		fatal "Profiles list and key count do not match:" \
			"$profiles / $profkeys"
	fi
	gt_gconf_profile_must_exist "Default"

	echo "$newprof"
}

gt_gconf_clone_default_profile() {
	local profile=$1
	local profkey="$gcprofrootkey"/"$profile"
	local defaultkey="$gcrootkey"/global/default_profile
	local default
	local defaultname

	default=$("$gconftool" --get "$defaultkey")
	gt_gconf_profile_must_exist "$default"

	defaultname=$(gt_gconf_profile_name "$default")
	message "Creating new Gnome Terminal profile based on" \
		"$default ($defaultname): $profile ($user)"

	# Order of operations is important!

	# Load the new profile key copying from current default
	"$gconftool" --load <(\
		"$gconftool" --dump "$gcprofrootkey"/"$default" |
		sed "/^[ ]*<entrylist/s/$default\">\$/$profile\">/" |
		sed '/^[ ]*<schema_key/d') &&

	# Change the name
	"$gconftool" --type string --set "$profkey"/visible_name "$user" &&

	# Delete "encoding" and "icon" keys
	"$gconftool" --unset "$profkey"/icon &&
	"$gconftool" --unset "$profkey"/encoding &&

	# Update the profile list - should be *after* changing name
	"$gconftool" --type list --list-type string --set "$gclistkey" \
		"$("$gconftool" --get "$gclistkey" | sed "s/]/,$profile]/")" &&

	# Set as default
	"$gconftool" --type string --set "$defaultkey" "$profile" ||

	false  # trigger bash's `-e`, if active
}

gt_gconf() {
	# Get a new profile key
	local profile
	local profkey
	profile=$(gt_gconf_get_free_profile)
	if [[ -z "$profile" ]]; then return; fi  # exit gracefully
	profkey="$gcprofrootkey"/"$profile"

	# Create the new profile
	gt_gconf_clone_default_profile "$profile"

	# Change settings
	"$gconftool" --type float  --set "$profkey"/background_darkness     0.885125
	"$gconftool" --type string --set "$profkey"/background_type         transparent
	"$gconftool" --type int    --set "$profkey"/default_size_columns    "$cols"
	"$gconftool" --type int    --set "$profkey"/default_size_rows       "$rows"
	"$gconftool" --type bool   --set "$profkey"/scrollback_unlimited    true
	"$gconftool" --type bool   --set "$profkey"/use_custom_default_size true
	"$gconftool" --type string --set "$profkey"/custom_command \
		"env TERM=xterm-256color /bin/bash"
}

gt_dconf() {
	local name=${1:-$user}
	local path='/org/gnome/terminal/legacy/profiles:/'
	local profiles= profile= puid= pname= sep=

	while IFS= read -r puid; do
		pname=$(dconf read "${path}${puid}visible-name")
		if [[ "'${name}'" != "$pname" ]]; then continue; fi
		profile=$puid
		break
	done < <(dconf list "$path" | awk '/^:/{print}')
	if [[ "$profile" ]]; then
		message "Update Gnome Terminal profile: $name (${profile:1:-1})"
	else
		profile=":$(uuidgen)/"
		message "Create Gnome Terminal profile: $name (${profile:1:-1})"
		profiles=$(dconf read "${path}list")
		if [[ "${profiles: -2}" == "']" ]]; then sep=', '; fi
		dconf write "${path}list" "${profiles::-1}${sep}'${profile:1:-1}']"
	fi
	# Created with: dconf dump "${path}${profile}" | sort
	dconf load "${path}${profile}" < <(sed -Ez 's/\n +//g' <<-EOF
		[/]
		background-transparency-percent=12
		default-size-columns=${cols}
		default-size-rows=${rows}
		scrollback-unlimited=true
		use-theme-transparency=false
		use-transparent-background=true
		visible-name='${name}'
	EOF
	)
	dconf write "${path}default" "'${profile:1:-1}'"
}


if version_lesser "$version" 3.7; then
	gt_gconf
else
	gt_dconf
fi
