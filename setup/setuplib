# Constants and support functions to be sourced by setup scripts

#   Copyright (C) 2015 Rodrigo Silva (MestreLion) <linux@rodrigosilva.com>
#   License: GPLv3 or later. See <http://www.gnu.org/licenses/gpl.html>

SETUP_VERBOSE=${SETUP_VERBOSE:-1}

if [[ -z "${SETUP_DISTRO:-}" ]]; then
	SETUP_DISTRO=$(lsb_release -si)
	SETUP_DISTRO=${SETUP_DISTRO,,}
fi

if [[ -z "${SETUP_RELEASE:-}" ]]; then
	SETUP_RELEASE=$(lsb_release -sr)
	SETUP_RELEASE=${SETUP_RELEASE//\./}
fi

if [[ -z "${SETUP_CODENAME:-}" ]]; then
	SETUP_CODENAME=$(lsb_release -sc)
	SETUP_CODENAME=${SETUP_CODENAME//\./}
fi

if [[ -z "${SETUP_BITS:-}" ]]; then
	if [[ "$(arch)" == 'x86_64' ]]; then
		SETUP_BITS=64
	else
		SETUP_BITS=32
	fi
fi


exists()  { type "$1" >/dev/null 2>&1; }
relpath() { python -c "import sys, os; print os.path.relpath(*sys.argv[1:])" "$@"; }
message() { ((SETUP_VERBOSE)) && echo "$@"; }
fatal()   { [[ "${1:-}" ]] && echo "${0##*/}: error: $1" >&2 ; exit ${2:-1} ; }
integer() {
	if ! [[ "$1" != *[!0-9]* ]]; then
		echo "'$1'${2:+ in $2} is not an integer." >&2
		return 1
	fi
}

required() {
	local cmd=$1
	local msg=${2:-Missing required command: $cmd}
	if ! exists "$cmd"; then
		fatal "$msg"
	fi
}

version_sort() {
	# print one argument per line sorted on version ordering
	printf "%s\n" "$@" | LC_ALL=C sort --version-sort
}

version_compare() {
	# Usage: version_compare <greater|lesser> version [versions...]
	# Return 0 if version is the greatest (or the least) of all versions,
	# non-zero otherwise
	if [[ "$1" == "greater" ]]; then
		local cmd=(tail -n1)
	else
		local cmd=(head -n1)
	fi
	shift
	if ! [[ "$(version_sort "$@" | "${cmd[@]}")" == "$1" ]]; then
		return 1
	fi
}

version_greater() {
	# Usage: version_greater <version> <reference>
	# Return 0 if version is greater or equal than reference,
	# non-zero otherwise
	if ! version_compare "greater" "$1" "$2"; then return 1; fi
}

version_lesser() {
	# Usage: version_lesser <version> <reference>
	# Return 0 if version is lesser or equal than reference,
	# non-zero otherwise
	if ! version_compare "lesser" "$1" "$2"; then return 1; fi
}

package_version() {
	dpkg-query --showformat='${Version}' --show "$1" 2>/dev/null
}

package_exists() {
	package_version "$1" >/dev/null
}

is_online() {
	ping -c 1 www.google.com >/dev/null 2>&1
}
