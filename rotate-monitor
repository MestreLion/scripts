#!/bin/bash
#
# rotate-monitor - rotate primary monitor, adjusting other monitors to it
#
#    Copyright (C) 2012 Rodrigo Silva (MestreLion) <linux@rodrigosilva.com>
#
#    This program is free software: you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation, either version 3 of the License, or
#    (at your option) any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with this program. See <http://www.gnu.org/licenses/gpl.html>
#
# Uses xandr for its magic.The key is not the rotation itself, but the
# repositioning of all other monitors relative to the new height x width
# of the primary monitor

myname="${0##*/}"
verbose=0
notify=1
rotate=normal
layout_list=
position="right-of"
primary=

message() { printf "%s\n" "$1" >&2 ; }
fatal()   { [[ "$1" ]] && message "$myname: error: $1" ; exit ${2:-1} ; }
argerr()  { printf "%s: %s\n" "$myname" "${1:-error}" >&2 ; usage 1 ; }
invalid() { argerr "invalid argument: $1" ; }
missing() { argerr "missing ${2:+$2 }operand${1:+ from $1}." ; }


usage() {
	cat <<-USAGE
	Usage: $myname [options]
	USAGE
	if [[ "$1" ]] ; then
		cat >&2 <<- USAGE
		Try '$myname --help' for more information.
		USAGE
		exit 1
	fi
	cat <<-USAGE

	Rotate the primary monitor using xrandr, re-positioning the others
	monitors (if any) according to it.

	Options:
	  -h|--help      - show this page.
	  -q|--no-notify - do not show notify "bubble"
	  -v|--verbose   - print in terminal the full xrandr command executed

	  --primary OUTPUT
	                 - select which output will be set as primary.
	                   Default is the first connected monitor in xrandr list
	                   Example: --primary DFP10

	  --rotate ORIENTATION
	                 - how to rotate the primary monitor. ORIENTATION must
	                   be one of normal, left, right
	  --left
	  --portrait
	  --counterclockwise
	                 - same as --rotate left

	  --right
	  --clockwise
	                 - same as --rotate right

	  --normal
	  --landscape
	                 - same as --rotate normal


	Copyright (C) 2012 Rodrigo Silva (MestreLion) <linux@rodrigosilva.com>
	License: GPLv3 or later. See <http://www.gnu.org/licenses/gpl.html>
	USAGE
	exit 0
}

# Option handling
for arg in "$@"; do [[ "$arg" == "-h" || "$arg" == "--help" ]] && usage ; done
while (( $# )); do
	case "$1" in
	-v|--verbose) verbose=1 ;;
	-q|--no-notify) notify=0 ;;
	--primary=*) primary="${1#*=}" ;;
	--layout=* ) layout_list="${1#*=}" ;;
	--rotate=* ) rotate="${1#*=}" ;;
	--primary  ) shift ; primary="$1" ;;
	--layout   ) shift ; layout_list="$1" ;;
	--rotate   ) shift ; rotate="$1" ;;
	--normal|--landscape) rotate="normal" ;;
	--left|--portrait|--counterclockwise) rotate="left" ;;
	--right|--clockwise) rotate="right" ;;
	*) invalid "$1" ;;
	esac
	shift
done


# Parse rotate
[[ "$rotate" ]] || missing "--rotate" "ORIENTATION"
case "${rotate,,}" in
	normal|left|right)
		rotate="${rotate,,}"
		if [[ "$rotate" == normal ]]; then
			label="Landscape (Normal)"
		else
			label="Portrait"
		fi
	;;
	*) argerr "invalid orientation argument for --rotate: $rotate" ;;
esac

# Parse layout
IFS=, read -a layout <<<"$layout_list"
for pos in "${layout[@]}"; do
	case "${pos,,}" in
		right-of|left-of|above|below|same-as) continue ;;
		*) argerr "invalid position argument for --layout: $pos" ;;
	esac
done

# Parse default position
[[ "$position" ]] || missing "--position" "DEFAULT_POSITION"
case "${position,,}" in
	right-of|left-of|above|below|same-as) ;;
	*) argerr "invalid position argument for --position: $position" ;;
esac

# Read outputs (monitors)
{
	# Set primary
	if [[ -z "$primary" ]]; then
		read -r primary
	fi
	xrandropts+=(--output "$primary" --primary --rotate "$rotate" --pos 0x0)
	previous="$primary"

	# Loop the others
	i=0
	while ((i++)); read -r output; do
		if [[ "$output" != "$primary" ]]; then
			[[ "${layout[i-1]}" ]] || layout[i-1]="$position"
			xrandropts+=(--output "$output" "--${layout[i-1],,}" "$previous")
			previous="$output"
		fi
	done
} < <(xrandr | awk '$2 ~/^c/{print $1}')

((verbose)) && message "$myname: executing xrandr ${xrandropts[*]}"
xrandr "${xrandropts[@]}"
